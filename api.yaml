openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/LEEGH963/village/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/KOOMIN1227_1/Village/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:3000
info:
  description: Village API
  version: '1.0.0'
  title: Village API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: user에 대한 api
  - name: posts
    description: post에 대한 api
  - name: block
    description: 특정 user , post 차단 api
  - name: images
    description: 이미지 업로드 api
  - name: auth
    description: 인증 api

components:
  securitySchemes:
    JWTAuth:
      type: apiKey
      in: header
      name: Authorization
      description: JWT를 사용한 인증 방식

paths:
  /users/{id}:
    get:
      tags:
        - users
      summary: id에 해당하는 user 정보를 반환
      description: |
        id에 해당하는 유저 정보를 반환한다.
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          description: 찾으려는 user hash
          required: true
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  nickname:
                    type: string
                    example: test
                  profile_img:
                    type: string
                    example: http://fsfffeef/svsser/sbsbre
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '403':
          description: 인증된 유저 정보가 찾으려는 유저 정보와 다를 때
        '404':
          description: 찾으려는 user가 없을 때
        '500':
          description: 서버 error

    patch:
      tags:
        - users
      summary: update user info
      description: user 정보를 수정한다. (수정하려는 필드만 보낸다. 닉네임이든 사진이든 둘중 수정된값 하나는 무조건 포함해서 보내야한다.)
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          description: 찾으려는 user hash
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data: # Media type
            schema: # Request payload
              type: object
              properties: # Request parts
                profile: # Part2 (object)
                  type: object
                  properties:
                    nickname:
                      type: string
                profileImage: # Part 3 (an image)
                  type: string
                  format: binary
      responses:
        '200':
          description: 수정 성공
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '403':
          description: 인증된 유저 정보가 찾으려는 유저 정보와 다를 때
        '404':
          description: 변경하려는 유저를 찾을 수 없음
        '500':
          description: 서버 오류
      required:
        - profile
        - profileImage
      properties:
        profileImage:
          required: false
    delete:
      tags:
        - users
      summary: remove user
      description: |
        유저 정보를 삭제한다.
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          description: 찾으려는 user hash
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 성공적으로 삭제된 경우
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '403':
          description: 인증된 유저 정보가 찾으려는 유저 정보와 다를 때
        '404':
          description: 찾으려는 user가 없을 때
        '500':
          description: 서버 error
  /users:
    post:
      tags:
        - users
      summary: register user
      description: 유저를 등록한다. (회원가입)
      requestBody:
        content:
          multipart/form-data: # Media type
            schema: # Request payload
              type: object
              properties: # Request parts
                profile: # Part2 (object)
                  type: object
                  properties:
                    nickname:
                      type: string
                    socialEmail:
                      type: string
                      format: email
                    OAuthDomain:
                      type: string
                      example: kakao
                profileImage: # Part 3 (an image)
                  type: string
                  format: binary
      responses:
        '201':
          description: 정상적으로 등록됨
        '409':
          description: 이미 가입되어 있는 유저 정보인 경우
        '500':
          description: 서버 오류
      required:
        - profile
        - profileImage
      properties:
        profileImage:
          required: false
  /users/block:
    get:
      tags:
        - block
      summary: return blocked user
      description: 차단된 유저 목록을 가져온다.
      security:
        - JWTAuth: []
      responses:
        '200':
          description: 차단된 유저 목록 반환 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    nickname:
                      type: string
                    profile_img:
                      type: string
                      format: uri
                    user_id:
                      type: string
                      format: hash
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '500':
          description: 서버 error

  /users/block/{id}:
    post:
      tags:
        - block
      summary: block user
      description: 특정 유저를 차단한다.
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          description: 차단하려는 user hash
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 차단 성공
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '403':
          description: 인증된 유저 정보가 찾으려는 유저 정보와 다를 때
        '404':
          description: 찾으려는 user가 없을 때
        '500':
          description: 서버 error
    delete:
      tags:
        - block
      summary: unblock user
      description: 특정 유저를 차단 해제한다.
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          description: 차단 해제하려는 user hash
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 차단 해제 성공
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '403':
          description: 인증된 유저 정보가 찾으려는 유저 정보와 다를 때
        '404':
          description: 찾으려는 user가 없을 때
        '500':
          description: 서버 error
  /posts:
    get:
      tags:
        - posts
      summary: return post lists
      description: 게시글 목록을 가져온다
      security:
        - JWTAuth: []
      parameters:
        - in: query
          name: searchKeyword
          description: 검색 키워드
          required: false
          schema:
            type: string
        - in: query
          name: filter
          description: 상품 요청 / 상품 등록 구분
          required: false
          schema:
            type: string
        - in: query
          name: writer
          description: 게시글 작성자
          required: false
          schema:
            type: string
      responses:
        '200':
          description: post 목록 반환 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    post_image:
                      type: string
                      format: uri
                    price:
                      type: integer
                    post_id:
                      type: integer
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '403':
          description: 인증된 유저 정보가 찾으려는 유저 정보와 다를 때
        '500':
          description: 서버 error
    post:
      tags:
        - posts
      summary: create a post
      description: 게시글 생성
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: '닌텐도 스위치'
                contents:
                  type: string
                  example: '빌려드립니다'
                price:
                  type: integer
                  example: '10000'
                unit:
                  type: string
                  example: '하루'
                images:
                  type: array
                  items:
                    type: string
                    format: uri
                    example: 'https://abcd.com/12'
                profileImages:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: 게시글 생성 성공
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '403':
          description: 인증된 유저 정보가 찾으려는 유저 정보와 다를 때
        '500':
          description: 서버 error
  /posts/{id}:
    get:
      tags:
        - posts
      summary: return post detail
      description: 게시물의 상세정보를 가져온다
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          description: 게시글 id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 게시물 상세정보 반환 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    example: '닌텐도 스위치'
                  contents:
                    type: string
                    example: '빌려드립니다'
                  price:
                    type: integer
                    example: '10000'
                  unit:
                    type: string
                    example: '하루'
                  user_id:
                    type: string
                    format: hash
                    example: 'undefined'
                  images:
                    type: array
                    items:
                      type: string
                      format: uri
                      example: 'https://abcd.com/12'
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '500':
          description: 서버 error
    delete:
      tags:
        - posts
      summary: remove post
      description: 게시글을 삭제한다
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          description: 게시글 id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 게시글 삭제 성공
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '403':
          description: 본인글이 아닌 글을 삭제하려고 할 때
        '404':
          description: 삭제하려는 post가 없을 때
        '500':
          description: 서버 error
    patch:
      tags:
        - posts
      summary: update post
      description: 게시글을 수정한다. (수정한 필드만 보낸다.수정하지 않은 필드는 보낼 필요 없다.)
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          description: 게시글 id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: '닌텐도 스위치'
                contents:
                  type: string
                  example: '빌려드립니다'
                price:
                  type: integer
                  example: '10000'
                unit:
                  type: string
                  example: '하루'
                images:
                  type: array
                  items:
                    type: string
                    format: uri
                    example: 'https://abcd.com/12'
      responses:
        '200':
          description: 게시글 수정 성공
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '403':
          description: 본인글이 아닌 글을 수정하려고 할 때
        '404':
          description: 수정하려는 post가 없을 때
        '500':
          description: 서버 error
  /posts/block:
    get:
      tags:
        - block
      summary: return blocked post
      description: 차단된 게시글 목록을 가져온다.
      security:
        - JWTAuth: []
      responses:
        '200':
          description: 차단된 게시글 목록 반환 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    post_image:
                      type: string
                      format: uri
                    post_id:
                      type: integer
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '500':
          description: 서버 error
  /posts/block/{id}:
    post:
      tags:
        - block
      summary: block post
      description: 특정 게시글을 차단한다.
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          description: 차단하려는 post id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 차단 성공
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '404':
          description: 찾으려는 post가 없을 때
        '500':
          description: 서버 error
    delete:
      tags:
        - block
      summary: unblock post
      description: 특정 게시글을 차단 해제한다.
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: id
          description: 차단 해제하려는 post id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 차단 해제 성공
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '404':
          description: 찾으려는 post가 없을 때
        '500':
          description: 서버 error

  /images:
    post:
      tags:
        - images
      summary: upload image
      description: 이미지를 업로드한다.
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data: # Media type
            schema: # Request payload
              type: object
              properties: # Request parts
                image: # Part 3 (an image)
                  type: string
                  format: binary
      responses:
        '201':
          description: 이미지 업로드 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
                    example: 'https://abcd.com/12'
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '500':
          description: 서버 error
    delete:
      tags:
        - images
      summary: remove image
      description: 이미지를 삭제한다.
      security:
        - JWTAuth: []
      parameters:
        - in: query
          name: url
          description: 삭제하려는 이미지 url
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 이미지 삭제 성공
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '404':
          description: 삭제하려는 이미지가 없을 때
        '500':
          description: 서버 error

  /logout:
    post:
      tags:
        - auth
      summary: logout
      description: 로그아웃한다.
      security:
        - JWTAuth: []
      responses:
        '200':
          description: 로그아웃 성공
        '401':
          description: jwt 토큰을 보내지 않았을 때
        '500':
          description: 서버 error
